# -*- coding: utf-8 -*-
"""mush_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_1eyW3-6GbB3B8zXXgnXRVnDSyGCe7pR
"""

import numpy as np
import os
from sklearn import preprocessing
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.metrics import confusion_matrix

UPLOAD_FOLDER='.'
filename = "mushrooms.csv"
file_path = os.path.join(UPLOAD_FOLDER, filename)
data = pd.read_csv(file_path)

le = LabelEncoder()

for i in data.columns:
    data[i] = le.fit_transform(data[i])

y = data["class"]
x = data.drop(["class","gill-attachment","bruises"], axis = 1)

xv = x.values
yv = y.values

x_train, x_test, y_train, y_test = train_test_split(xv, yv, test_size=0.8, random_state=2019)

my_tree = DecisionTreeClassifier(max_depth = 100)
fig = my_tree.fit(x_train,y_train)

prediction = fig.predict(x_test)

def README():
    print("Use endpoints /confusion_matrix, /assessment and /model to find out more about the model")
    print("Use endpoints /predict-csv for csv files or /predict_input/{inputs} for manual input.")
    print("The csv file should have headers and be formatted like mushrooms.csv without the class, which will be predicted.")
    print("Both should be in the following encode:")
    print("cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s")
    print("cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s ")
    print("cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y")
    print("bruises: bruises=t,no=f")
    print("odor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s")
    print("gill-attachment: attached=a,descending=d,free=f,notched=n")
    print("gill-spacing: close=c,crowded=w,distant=d")
    print("gill-size: broad=b,narrow=n")
    print("gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y")
    print("stalk-shape: enlarging=e,tapering=t")
    print("stalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?")
    print("stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s")
    print("stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s")
    print("stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y")
    print("stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y")
    print("veil-type: partial=p,universal=u")
    print("veil-color: brown=n,orange=o,white=w,yellow=y")
    print("ring-number: none=n,one=o,two=t")
    print("ring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z")
    print("spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y")
    print("population: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y")
    print("habitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d")

def model():
    tree.plot_tree(fig)


def confusion_matrix():
    
    [TP, TN, FP, FN] = confusion_matrix(y_test, prediction, labels = [1,0]).ravel()
    print("             Actual")
    print("m         True | False")
    print("o True [", TP, " | ", FP, "]")
    print("d      [--------------]")
    print("e False[", TN, "  | ",FN, "]")
    print("l")

def evaluation():
    [TP, TN, FP, FN] = confusion_matrix(y_test, prediction, labels = [1,0]).ravel()
    print("Accuracy")
    print((TP+TN)/(TP+TN+FP+FN))
    print("Precision")
    print(TP/(TP+FP))
    print("Recall")
    print(TP/(TP+FN))
    print("F1 Score")
    print(2*TP/(2*(TP+FN+FP)))

